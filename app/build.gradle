apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.eutechpro.smshelp"
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
        configurations.all {
            resolutionStrategy {
                force "com.android.support:support-annotations:25.3.1"
            }
        }
    }
    flavorDimensions "type"

    productFlavors {
        prod {
            dimension "type"
            minSdkVersion 16
        }

        develop {
            dimension "type"
            minSdkVersion 23
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'org.jetbrains.anko:anko-commons:0.10.0'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.3.0'

    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'com.google.android:flexbox:0.2.6'

    compile 'com.squareup.moshi:moshi:1.5.0'

    compile 'com.facebook.stetho:stetho:1.5.0'
    // Dagger 2
    compile 'com.google.dagger:dagger:2.4'
    kapt 'com.google.dagger:dagger-compiler:2.4'
    provided 'javax.annotation:jsr250-api:1.0'
    // Testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'com.nhaarman:mockito-kotlin:1.4.0'
    //Temporary b/c Mockito is fucked up with Kotlin
    testCompile 'org.mockito:mockito-core:2.8.9'
    androidTestCompile 'com.nhaarman:mockito-kotlin:1.4.0'
    //Temporary b/c Mockito is fucked up with Kotlin
    androidTestCompile 'org.mockito:mockito-android:2.8.47'
    //AssertJ-Android
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
}
configurations.all {
    resolutionStrategy {
        force 'org.jetbrains.kotlin:kotlin-stdlib:1.0.7'
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
//         events "passed", "skipped", "failed", "standardOut"
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            //To print all:
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
//            events "started", "skipped", "failed", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} \n         ${result.testCount} tests \n         ${result.successfulTestCount} successes \n         ${result.failedTestCount} failures \n         ${result.skippedTestCount} skipped"
                def startItem = '', endItem = '  '
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

